#!/usr/bin/ruby

$sp="  "
def printp(x,l)
  l.each{|a|
    if x.kind_of?(Array) then x=x[a] else
      print $sp
      return
    end
  }
  print x.kind_of?(Array) ? "/\\" : x.to_s.rjust(2," ")
end


def dump(x)

  print($sp*31)
  printp(x, [])
  puts

  2.times{|a|
    print($sp*15)
    print($sp*16) unless a==0
    printp(x, [a]) }
  puts
  
  2.times{|a| 2.times{|b|
      print($sp*7)
      print($sp*8) unless a+b==0
      printp(x,[a,b])
    } }
  puts
  
  2.times{|a| 2.times{|b| 2.times{|c|
        print($sp*3)
        print($sp*4) unless a+b+c==0
        printp(x,[a,b,c])
      } } }
  puts
  
  2.times{|a| 2.times{|b| 2.times{|c| 2.times{|d|
          print($sp)
          print($sp*2) unless a+b+c+d==0
          printp(x,[a,b,c,d])
        } } } }
  puts
  
  2.times{|a| 2.times{|b| 2.times{|c| 2.times{|d| 2.times{|e|
            printp(x,[a,b,c,d,e])
            print $sp unless a+b+c+d+e==5
          } } } } }
  puts

  puts
end

def curr(x,t)
  c=x
  t.each{|i| c=c[i]}
  c
end

def reduce(x)
  t=[]
  while true
    c=curr(x,t)
    if c.kind_of?(Array) then
      if t.size==4 then
#        print "reduce "
#        p c
        if t.pop==0 then
          c0=c[0]
          c1=c[1]
          curr(x,t)[0]=0
          if curr(x,t)[1].kind_of?(Array) then curr(x,t)[1][0]+=c1
          else curr(x,t)[1]+=c1 end
          while t.size>0 do
            if t.pop==1 then
              t << 0
              while curr(x,t).kind_of?(Array) do t << 1 end
              last=t.pop
              curr(x,t)[last]+=c0
              return true
            end
          end
          return true
        else
          c0=c[0]
          c1=c[1]
          curr(x,t)[1]=0
          if curr(x,t)[0].kind_of?(Array) then curr(x,t)[0][1]+=c0
          else curr(x,t)[0]+=c0 end
          while t.size>0 do
            if t.pop==0 then
              t << 1
              while curr(x,t).kind_of?(Array) do t << 0 end
              last=t.pop
              curr(x,t)[last]+=c1
              return true
            end
          end
          return true
        end
      end
      t << 0
    else
      t[-1]+=1
      while t[-1]>1 do
        t.pop
        if t.size==0 then return end
        t[-1]+=1
      end
    end
  end
  false
end

def split(x)
  t=[]
  while true
    c=curr(x,t)
    if c.kind_of?(Array) then
      t << 0
    else
      if c>=10 then
#        print "split "
#        p c
        last=t.pop
        curr(x,t)[last]=[c/2,(c+1)/2]
        return true
#        t << last
      end
      t[-1]+=1
      while t[-1]>1 do
        t.pop
        if t.size==0 then return false end
        t[-1]+=1
      end
    end
  end
end

def deep_dup(x)
  x.kind_of?(Array) ? x.map{|it|deep_dup(it)} : x
end

def sum(a,b)
  ret=[deep_dup(a),deep_dup(b)]
  while true do
    if not reduce(ret) and not split(ret) then return ret end
  end
end

def solve(input)
  ret=input[0]
  (1...input.size).each{|i|
    ret=sum(ret,input[i])
  }
  ret
end

def magnitude(x)
  if x.kind_of?(Array) then return 3*magnitude(x[0])+2*magnitude(x[1]) end
  return x
end

in0=[[1,1],
     [2,2],
     [3,3],
     [4,4]]
#p solve(in0)

in1=[[1,1],
     [2,2],
     [3,3],
     [4,4],
     [5,5]]
#p solve(in1)

in2=[[1,1],
     [2,2],
     [3,3],
     [4,4],
     [5,5],
     [6,6]]
#p solve(in2)

in3=[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],
     [7,[[[3,7],[4,3]],[[6,3],[8,8]]]],
     [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]],
     [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]],
     [7,[5,[[3,8],[1,4]]]],
     [[2,[2,2]],[8,[8,1]]],
     [2,9],
     [1,[[[9,3],9],[[9,0],[0,7]]]],
     [[[5,[7,4]],7],1],
     [[[[4,2],2],6],[8,7]]]

#p magnitude(solve(in3))

in4=[[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]],
     [[[5,[2,8]],4],[5,[[9,9],0]]],
     [6,[[[6,2],[5,6]],[[7,6],[4,7]]]],
     [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]],
     [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]],
     [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]],
     [[[[5,4],[7,7]],8],[[8,3],8]],
     [[9,3],[[9,9],[6,[4,9]]]],
     [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]],
     [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]]
#p solve(in4)
# maxm=0
# in4.size.times{|i|
#   in4.size.times{|j|
#     if i==j then next end
#     maxm=[maxm,magnitude(sum(in4[i],in4[j]))].max
#   }
# }
# p maxm

in5=[[[1,[8,[5,8]]],[[4,4],[8,[8,8]]]],
     [[[3,[2,3]],[[8,0],2]],[0,[[8,1],[7,0]]]],
     [4,[[0,3],[[6,6],[3,8]]]],
     [[[7,[6,4]],[[0,6],[2,0]]],[[[5,6],[0,4]],[[8,1],[9,1]]]],
     [[[6,3],[[6,9],4]],[[1,[4,2]],[[0,0],1]]],
     [[2,0],[3,[0,8]]],
     [[0,[5,5]],[[4,2],[3,[6,4]]]],
     [[[[9,9],[8,5]],[7,4]],[[6,9],[8,[0,8]]]],
     [[[[7,1],[2,9]],[[9,3],0]],[3,[[0,6],[7,6]]]],
     [[[[3,7],[7,1]],[[5,8],[0,1]]],3],
     [[[[4,6],[6,2]],[[9,1],7]],[[9,1],[8,0]]],
     [[[[2,7],0],[[9,4],[2,6]]],[0,[[7,4],[0,3]]]],
     [[5,[[0,2],[8,8]]],[[[4,1],9],3]],
     [[[7,1],[[3,7],[3,4]]],[[[0,7],[1,6]],1]],
     [[[6,5],[[1,8],[8,8]]],[[4,5],[3,7]]],
     [[[1,[3,3]],[[3,2],[5,7]]],[[8,[9,3]],[[5,3],4]]],
     [[[4,[2,7]],9],[9,[[5,6],4]]],
     [[[9,1],3],[[1,2],9]],
     [[[[0,0],[2,3]],[[7,8],[1,5]]],[[[8,6],7],[[8,3],9]]],
     [6,[[5,[0,8]],1]],
     [4,[[[3,0],[2,0]],[[7,2],[1,4]]]],
     [[[[4,3],[4,1]],8],[[[9,4],[1,9]],[4,[0,6]]]],
     [4,[5,6]],
     [[[0,[6,1]],[[6,1],3]],[[0,[7,8]],[1,0]]],
     [[5,[[8,7],8]],8],
     [[5,[[5,2],0]],[[1,[4,7]],[[0,9],[2,3]]]],
     [[7,[2,2]],[[6,3],[5,8]]],
     [[[0,9],5],[1,[[5,7],1]]],
     [[8,[3,[0,3]]],[[[2,2],2],[[8,8],[8,9]]]],
     [[6,[[3,2],[2,6]]],[5,1]],
     [[[[9,8],[6,8]],[0,7]],7],
     [[[7,2],[[6,3],4]],2],
     [[[5,2],[[1,6],[8,3]]],[6,5]],
     [[5,2],[0,5]],
     [[[[4,5],5],[[4,6],[1,2]]],[[[3,6],[4,9]],[1,9]]],
     [[1,[4,1]],[[9,[5,5]],[[9,0],[5,7]]]],
     [[[[8,9],[7,7]],2],[8,1]],
     [[[8,1],[8,[9,5]]],3],
     [[[2,[3,9]],[[5,4],[7,9]]],[9,8]],
     [8,[[2,[0,9]],[[5,0],4]]],
     [[[6,[4,8]],[0,6]],[[8,[1,8]],1]],
     [[6,[[1,0],[6,2]]],[[9,[3,7]],[5,[4,0]]]],
     [[8,[0,[9,1]]],8],
     [7,[4,[7,2]]],
     [[1,[[5,7],[5,4]]],[[5,[8,0]],[1,6]]],
     [[[[0,6],[6,2]],3],[[[9,3],7],[7,[1,2]]]],
     [[[6,[4,9]],8],[6,5]],
     [[[0,[1,9]],[[1,9],[3,9]]],[[[3,4],[7,5]],3]],
     [[[[9,3],5],[[0,5],[2,7]]],9],
     [[[6,[7,5]],5],[1,[[7,0],[3,4]]]],
     [[[2,1],[[1,3],[1,5]]],[4,[9,[7,9]]]],
     [[[[7,9],4],[[8,8],7]],[[[3,5],2],[[4,4],[6,5]]]],
     [[1,1],[1,1]],
     [[8,[0,2]],8],
     [[[2,[2,1]],[[1,7],[1,2]]],[[1,6],5]],
     [6,[0,[[1,0],[0,9]]]],
     [6,[[2,[8,0]],[8,[8,8]]]],
     [4,[[3,[0,3]],4]],
     [[[5,3],3],[[0,[7,6]],[2,[5,8]]]],
     [[[[8,1],[4,1]],[[5,8],[4,8]]],[[[1,7],[7,2]],[0,[2,7]]]],
     [[[2,[3,5]],3],5],
     [[7,[[9,5],[8,2]]],[[[1,8],8],5]],
     [[3,5],[[4,[9,3]],5]],
     [[[[4,6],2],[2,2]],[0,[0,4]]],
     [[[[5,8],[6,6]],[2,0]],[[[2,3],9],[[4,5],2]]],
     [[[[1,9],3],[[3,4],6]],[[3,6],[6,[0,7]]]],
     [[[0,[5,5]],[2,6]],[[[7,4],4],2]],
     [0,[[8,[6,2]],[5,[1,5]]]],
     [[[[5,5],[9,6]],[[5,2],2]],[[4,7],[[5,5],[1,6]]]],
     [[4,7],[[[1,8],[9,6]],[2,3]]],
     [5,[5,4]],
     [[[[2,1],[7,0]],[5,[7,8]]],[6,[3,1]]],
     [[[3,1],[[2,4],6]],[[[1,8],[2,1]],[[1,7],4]]],
     [[[5,[3,3]],6],[[[0,0],9],[1,[7,4]]]],
     [[[6,5],[[7,3],4]],[[9,[0,3]],[3,[6,0]]]],
     [[[3,4],7],[8,[[1,7],[9,9]]]],
     [[[[2,1],6],[2,6]],[[[8,1],[6,2]],[9,0]]],
     [[8,4],[5,2]],
     [[4,[[4,5],9]],[[3,[5,2]],[4,2]]],
     [[[8,8],[[8,0],[5,3]]],4],
     [[1,8],[0,2]],
     [[[[7,2],[9,0]],[[9,2],[1,2]]],[[[4,0],3],0]],
     [[[[1,2],[1,8]],[[4,3],[8,6]]],[[[5,1],8],[8,1]]],
     [[[[5,3],[7,2]],7],[[6,[7,9]],[[3,8],[9,4]]]],
     [[[[3,1],[2,5]],6],[[[3,2],[8,8]],[4,6]]],
     [9,[[3,[2,3]],6]],
     [[[[4,0],[5,6]],[5,4]],[[[9,0],[1,8]],[5,[3,6]]]],
     [[[[9,5],[9,4]],[[5,7],5]],[[[1,4],7],[6,1]]],
     [[2,[6,[8,2]]],[7,[1,[3,3]]]],
     [[[9,1],[0,[6,3]]],[[5,[1,5]],[7,[1,0]]]],
     [1,6],
     [[0,[2,[8,9]]],[[[4,5],[5,4]],1]],
     [[[1,[4,1]],8],[[2,[7,0]],[7,[9,9]]]],
     [[[[5,7],[3,5]],[[6,6],2]],[2,[8,[9,0]]]],
     [6,[[[3,9],8],[[4,3],[6,1]]]],
     [[[[6,7],[7,6]],[2,8]],[[9,[4,1]],6]],
     [[[[4,5],[4,5]],[[0,6],5]],[[[6,5],[7,0]],1]],
     [[[[6,7],9],[[5,5],[6,6]]],[[7,1],[[8,2],[3,1]]]],
     [[[9,6],7],[[[1,8],8],[1,7]]],
     [[5,2],[[1,9],[2,2]]]]


puts "part1: "+magnitude(solve(in5)).to_s
maxm=0
in5.size.times{|i|
  in5.size.times{|j|
    if i==j then next end
    maxm=[maxm,magnitude(sum(in5[i],in5[j]))].max
  }
}
puts "part2: "+maxm.to_s

# x=[[[[[9,8],1],2],3],4]
# reduce(x)
# p x

# x=[7,[6,[5,[4,[3,2]]]]]
# reduce(x)
# p x

# x=[[6,[5,[4,[3,2]]]],1]
# reduce(x)
# p x

# x=[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]
# reduce(x)
# p x

# x=[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]
# reduce(x)
# p x

